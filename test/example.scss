/* multiple
line
comment */

// single line comment

// @use statement
@use "sass:math";
@use "src/corners";
@use "src/corners" as c;
@use "src/corners" as *;
@use "library" with (
  $black: #222,
  $border-radius: 0.1rem
);

// @forward statement
@forward "reset" as reset-*;
@forward "src/list" hide list-reset, $horizontal-list-gap;
@forward "library" with (
  $black: #222 !default,
  $border-radius: 0.1rem !default
);

// @import statement
@import "foundation";
@import "foundation/code", "foundation/lists";
@import "theme.css";
@import "http://fonts.googleapis.com/css?family=Droid+Sans";
@import url(theme);
@import "landscape" screen and (orientation: landscape);

.theme-sample {
  @import "theme";
}

@mixin google-font($family) {
  @import url("http://fonts.googleapis.com/css?family=#{$family}");
}

// @mixin statement and @include statement
@mixin horizontal-list {
  @include reset-list;

  li {
    display: inline-block;
    margin: {
      left: -2px;
      right: 2em;
    }
  }
}

nav ul {
  @include horizontal-list;
}

@include order(150px, "input.name", "input.address", "input.zip");
@include syntax-colors($string: #080, $comment: #800, $variable: #60b);
@include order(150px, $form-selectors...);

.button {
  border: 1px solid black;
  @include hover {
    border-width: 2px;
  }
}

@mixin media($types...) {
  @each $type in $types {
    @media #{$type} {
      @content ($type);
    }
  }
}

@include media(screen, print) using ($type) {
  h1 {
    font-size: 40px;
    @if $type == print {
      font-family: Calluna;
    }
  }
}

// @function statement
@function invert($color, $amount: 100%) {
  $inverse: change-color($color, $hue: hue($color) + 180);
  @return mix($inverse, $color, $amount);
}

@function str-insert($string, $insert, $index) {
  // Avoid making new strings if we don't need to.
  @if string.length($string) == 0 {
    @return $insert;
  }

  $before: string.slice($string, 0, $index);
  $after: string.slice($string, $index);
  @return $before + $insert + $after;
}

// @extend statement and placeholder selector
@extend .error;
@extend li;
@extend %strong-alert;

.alert:hover,
%strong-alert {
  font-weight: bold;
}

%strong-alert:hover {
  color: red;
}

// @errer statement
@error "Property #{$property} must be either left or right.";

@mixin reflexive-position($property, $value) {
  @if $property != left and $property != right {
    @error "Property #{$property} must be either left or right.";
  }

  $left-value: if($property == right, initial, $value);
  $right-value: if($property == right, $value, initial);

  left: $left-value;
  right: $right-value;
  [dir="rtl"] & {
    left: $right-value;
    right: $left-value;
  }
}

// @warn statement
@warn "Unknown prefix #{$prefix}.";

@if not index($known-prefixes, $prefix) {
  @warn "Unknown prefix #{$prefix}.";
}

// @debug statement
@debug "divider offset: #{$divider-offset}";

// @at-root statement
@at-root .foo {
  .bar {
    color: red;
  }
}

@mixin unify-parent($child) {
  @at-root #{selector.unify(&, $child)} {
    @content;
  }
}

// @if and @else statement
@if $direction == up {
  border-bottom-color: $color;
} @else if $direction == right {
  border-left-color: $color;
} @else if $direction == down {
  border-top-color: $color;
} @else if $direction == left {
  border-right-color: $color;
} @else {
  @error "Unknown direction #{$direction}.";
}

@if $var1 and $var2 {
  // ...
} @else if $var1 or $var2 {
  // ...
} @else if not $var1 {
  // ...
}

// @each statement
@each $size in $sizes {
  .icon-#{$size} {
    font-size: $size;
    height: $size;
    width: $size;
  }
}

@each $name, $glyph, $size in $icons {
  .icon-#{$name}:before {
    display: inline-block;
    font-family: "Icon Font";
    content: $glyph;
    font-size: $size;
  }
}

// @for statement
@for $i from 1 through 3 {
  ul:nth-child(3n + #{$i}) {
    background-color: lighten($base-color, $i * 5%);
  }
}

@for $i from 1 to 3 {
  ul:nth-child(3n + #{$i}) {
    background-color: lighten($base-color, $i * 5%);
  }
}

// @while statement
@function scale-below($value, $base, $ratio: 1.618) {
  @while $value > $base {
    $value: math.div($value, $ratio);
  }
  @return $value;
}
